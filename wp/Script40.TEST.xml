<?xml version="1.0" encoding="UTF-8"?><script><script_id>40:TEST</script_id><name>InterimBillCreateAPICall</name><script_type_id>3</script_type_id><row_version>178</row_version><lu_id>SNEHAI</lu_id><lu_date>2015-10-29T03:41:28</lu_date><false_msg/><description/><emit_events>0</emit_events><script_line><script_line_id>158:TEST</script_line_id><script_id>40:TEST</script_id><sequence>1</sequence><script_class_id>7</script_class_id><source_name>LOCAL</source_name><row_version>1</row_version><lu_id>SNEHAI</lu_id><lu_date>2015-10-29T03:41:25</lu_date><statement>//InterimBillCreateAPICall[lf][lf][lf]//sw_Dictionary:[lf]//    sw_ByteArray: "InterimBill" = sw_Dictionary:[lf]//        sw_ByteArray: "AccountExternalId" = sw_ByteArray: "23"[lf]//        sw_ByteArray: "AccountExternalIdType" = sw_Int: 1[lf]//        sw_ByteArray: "IncludeAdj" = sw_Int: 0[lf]//        sw_ByteArray: "IncludeNrc" = sw_Int: 1[lf]//        sw_ByteArray: "IncludePayment" = sw_Int: 0[lf]//        sw_ByteArray: "IncludeRc" = sw_Int: 1[lf]//        sw_ByteArray: "IncludeUsage" = sw_Int: 0[lf]//        sw_ByteArray: "InterimBillDate" = sw_ByteArray: "2014-10-10"[lf]//        sw_ByteArray: "PaymentDueDate" = sw_ByteArray: "2014-10-10"[lf]//        sw_ByteArray: "StatementDate" = sw_ByteArray: "2014-10-10"[lf][lf][lf]// Standard Java Files[lf]importPackage(Packages.java.math);[lf]importPackage(Packages.java.lang);[lf]importPackage(Packages.java.util);[lf]importPackage(Packages.java.text);[lf][lf]// Workpoint Files[lf]importPackage(Packages.com.workpoint.client);[lf]importPackage(Packages.com.workpoint.common.util);[lf]importPackage(Packages.com.workpoint.common.data);[lf]// Security Files[lf]importPackage(Packages.com.csgsystems.fx.security);[lf]// Bali Files[lf]importPackage(Packages.com.csgsystems.bali.connection);[lf]importPackage(Packages.com.csgsystems.aruba.connection);[lf][lf]importPackage(Packages.com.workpoint.common.logging);[lf]//java.lang.System.out.println("just after import statements ");[lf]logger = WPLogger.getLogger("com.workpoint.comverse.SOA");[lf]simpledateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss"); [lf]logger.info("INFO: ActivityInstId: " + [lf]    SymbolTable.getSymbol("ActInstIDStr").getPrimaryValue() +[lf]    " Iteration: " + SymbolTable.getSymbol("WorkItemIteration").getPrimaryValue());[lf][lf]testing1= SymbolTable.getSymbol("testing1");[lf]//java.lang.System.out.println("Inside if Value of testing222222222222222 is--------" + testing1);[lf]try[lf]{[lf]   // Check to see if this script is ran in a subjob[lf]   if (ThisJobData.getJobParentID())[lf]  {[lf]     logger.debug("DEBUG: gettingparent job");[lf]     job = Job.queryByID(ClientContext, ThisJobData.getJobParentID(), true);[lf]     soid =job.getBulkUserDataString("ServiceOrderId");[lf]     oid = job.getBulkUserDataString("OrderId");[lf]     serverid = new Integer(job.getBulkUserDataString("CustomerServerId"));[lf]     testing = job.getBulkUserDataString("testing");[lf]//java.lang.System.out.println("Inside if Value of testing is--------" + testing);[lf]   }[lf][lf]   else[lf]   {[lf]      logger.debug("DEBUG: no parent");[lf]      soid = ThisJobData.getBulkUserDataString("ServiceOrderId");[lf]      oid = ThisJobData.getBulkUserDataString("OrderId");[lf]      testing = ThisJobData.getBulkUserDataString("testing");[lf]      //java.lang.System.out.println("Inside else Value of testing is--------" + testing);[lf]      serverid = new Integer(ThisJobData.getBulkUserDataString("CustomerServerId"));[lf]    }[lf][lf]   //java.lang.System.out.println("Value of ved is--------" + ved);[lf]    comdate = ThisJobData.getBulkUserDataString("CompleteDate");[lf]    comdate1 = simpledateFormat.parse(comdate); [lf]    [lf]    //sysdate + 1 logic[lf]    calendar = Calendar.getInstance();[lf]    calendar.setTime(comdate1);[lf]    calendar.add(Calendar.DAY_OF_MONTH,1);[lf]    calendar.set(Calendar.HOUR_OF_DAY,0);[lf]    calendar.set(Calendar.MINUTE,0);[lf]    calendar.set(Calendar.SECOND,0);[lf]    calendar.set(Calendar.MILLISECOND,0);[lf]    nextcalendardate = calendar.getTime();[lf]    nextcalendardateAsString = simpledateFormat.format(nextcalendardate);[lf][lf]    [lf]    logger.debug("DEBUG: ServiceOrderId " + soid);[lf]    logger.debug("DEBUG: CompleteDate " + comdate);[lf]    logger.debug("DEBUG: OrderId " + oid);[lf]    logger.debug("DEBUG: CustomerServerId " + serverid);[lf]   [lf][lf]    sm = SecurityManagerFactory.createSecurityManager ();[lf]    connfact = new ConnectionFactory();[lf]    settings = BSDMSettings.getDefault();[lf]    conn =connfact.createConnection(settings);[lf][lf]    session = BSDMSessionContext.getDefaultContext();[lf]    session.setSecurityContext(sm);[lf]    session.setServerId(serverid);[lf][lf]    logger.debug("DEBUG:Preparing AccountLocateFindByOrderNumber Request Map for orderid " + oid);    [lf][lf]    findmap = new HashMap();[lf]    temp = new HashMap();[lf]    temp.put("Equal",oid);[lf]    findmap.put("OrderNumber", temp);[lf]    findreqestmap = new HashMap();[lf]    findreqestmap.put("AccountLocate", findmap);[lf]    findreqestmap = conn.call(session, ApiMappings.getCallName ("AccountLocateFindByOrderNumber"), findreqestmap);[lf][lf]    obj = [];[lf]    obj = findreqestmap.get("AccountLocateList");[lf]    //java.lang.System.out.println("Object is--------" + obj[0]);[lf]    map =new HashMap();[lf]    map = obj[0];[lf]    logger.debug("DEBUG:Map  is--------" + map);[lf]    //java.lang.System.out.println("Map  is--------" + map);[lf][lf]    AccountExternalId =map.get("AccountExternalId");[lf]    AccountExternalIdType =new Integer(map.get("AccountExternalIdType"));[lf]    logger.debug("DEBUG:AccountExternalId  is--------" + +AccountExternalId);[lf]    logger.debug("DEBUG:AccountExternalIdType  is--------" + +AccountExternalIdType);[lf]    //java.lang.System.out.println("AccountExternalId is ----"+AccountExternalId);[lf]    //java.lang.System.out.println("AccountExternalIdType is ----"+AccountExternalIdType);[lf][lf]    logger.debug("DEBUG:Preparing InterimBillFind Request Map for AccountExternalId " + AccountExternalId);[lf]    //java.lang.System.out.println("DEBUG:Preparing InterimBillFind Request Map for AccountExternalId " + AccountExternalId);[lf]    [lf][lf]    accountcriteriamap = new HashMap();[lf]    accountcriteriamap.put("Equal",AccountExternalId);[lf][lf]    interimbillcriteriamap = new HashMap();[lf]    interimbillcriteriamap.put("AccountExternalId",accountcriteriamap);[lf][lf]    interimbillfindrequestmap = new HashMap();[lf]    interimbillfindrequestmap.put("InterimBill", interimbillcriteriamap);[lf]    [lf]    interimbillresponseMap = new HashMap();[lf]    interimbillresponseMap = conn.call(session, ApiMappings.getCallName("InterimBillFind"), interimbillfindrequestmap);[lf][lf]    logger.info("INFO:: InterimBillFind Response Map " + interimbillresponseMap);[lf]    java.lang.System.out.println("DEBUG:: InterimBillFind Response Map " + interimbillresponseMap);[lf][lf]    interimbillobjlist = [];[lf]   interimbillobjlist = interimbillresponseMap.get("InterimBillList"); [lf][lf]    fireinterimbill = 1;   [lf][lf]    //java.lang.System.out.println("nextcalendardate is ----"+nextcalendardate);[lf]    //java.lang.System.out.println("nextcalendardateAsString is ----"+nextcalendardateAsString);[lf][lf]    for (i = 0; interimbillobjlist.length &gt; 0 &amp;&amp; i &lt; interimbillobjlist.length ;i++) {[lf]                     interimbillobjlistitem = new HashMap();[lf]                     interimbillobjlistitem = interimbillobjlist[i];[lf]                     //java.lang.System.out.println("interimbillobjlistitem is ----"+interimbillobjlistitem);[lf][tab]interimbilldateInResp = interimbillobjlistitem.get("InterimBillDate");[lf]                     interimbilldateInRespAsString = simpledateFormat.format(interimbilldateInResp);[lf][lf]                     logger.debug("DEBUG::interimbilldateInRespAsString::"+interimbilldateInRespAsString);[lf][lf]                     spaceString = " ";[lf]                     datePartIndexFromCalendar = new Integer(nextcalendardateAsString.indexOf(spaceString));[lf][lf]                     //extract date part from (sysdate+1) for comparison with interimbilldateInResp[lf]                     if (datePartIndexFromCalendar &gt; 0 ) {[lf][lf]                          datePartFromCalendar =nextcalendardateAsString.substr(0, datePartIndexFromCalendar);[lf]                          //java.lang.System.out.println("datePartFromCalendar is ----"+datePartFromCalendar);[lf][lf]                          //check if date part from (sysdate+1) matches with interimbilldate In Find Response[lf]                          datePartIndexFromBillDateResp = new Integer(interimbilldateInRespAsString.indexOf(datePartFromCalendar));[lf]                          //java.lang.System.out.println("datePartIndexFromBillDateResp is "+datePartIndexFromBillDateResp);[lf][lf]                          //if index is &gt; -1, then interim bill with (sysdate+1) already exists, turn interimbillflag to off[lf]                          if ( datePartIndexFromBillDateResp &gt; -1)  {[lf]                                 fireinterimbill = 0;                                 [lf]                          }[lf]  [lf]                     }[lf][lf]                     //java.lang.System.out.println("interimbilldate is ----"+interimbilldateInRespAsString + " datePartIndexFromBillDateResp  " + datePartIndexFromBillDateResp);                    [lf]                     //java.lang.System.out.println("InterimBillCreate ---date is ----"+nextcalendardateAsString);[lf]                     [lf]    }    [lf]    [lf]    //java.lang.System.out.println("fireinterimbill is ----"+fireinterimbill);[lf]    logger.debug("DEBUG::fireinterimbill::"+fireinterimbill);[lf][lf]    if( fireinterimbill == 1 ){[lf][lf]                                           resmap = new HashMap();[lf]                                           resmap.put("AccountExternalId", AccountExternalId);[lf][tab][tab]resmap.put("AccountExternalIdType", AccountExternalIdType);[lf]                                           resmap.put("IncludeAdj", false);[lf]                                           resmap.put("IncludeNrc", true);[lf]                                           resmap.put("IncludePayment", false);[lf]                                           resmap.put("IncludeRc", true);[lf]                                           resmap.put("IncludeUsage", false);[lf][lf]                                           resmap.put("InterimBillDate", nextcalendardateAsString);[lf]                                           resmap.put("PaymentDueDate", nextcalendardateAsString);[lf]                                           resmap.put("StatementDate", nextcalendardateAsString);[lf][lf]                                           requestmap = new HashMap();[lf]                                           requestmap.put("InterimBill", resmap);[tab]    [lf][lf]                                           logger.debug("DEBUG: Calling InterimBillCreate");[lf]                                           // java.lang.System.out.println("Before InterimBillCreate API Call ----"+ requestmap);[lf]                                           callresponse= new HashMap();[lf]                                           callresponse = conn.call(session, ApiMappings.getCallName ("InterimBillCreate"), requestmap);[lf]                                           // java.lang.System.out.println("After InterimBillCreate API Call ----"+callresponse);[lf]    }[lf]}[lf][lf]catch(e)[lf]{[lf] // java.lang.System.out.println("In Catch exceptionvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv: " + e);[lf]  logger.warn("WARN::Caught exception: " + e);[lf]  // need to complete node with code[lf]  [lf]  SymIteration = SymbolTable.getSymbol("WorkItemIteration").getPrimaryValue();[lf]  activity = new TableID(SymbolTable.getSymbol("ActInstIDStr").getPrimaryValue());[lf]  work = WorkItemEntry.queryByID(ClientContext, activity, SymIteration);[lf][lf]  if( work != null )[lf] {   [lf]    workstate = work.getWorkStateID();[lf]    if( workstate == WorkItemConst.WORK_STATE_AVAILABLE ) // Available[lf]      work.open();[lf][lf]   if (  e.message.indexOf('op_SO_LOCKED_ACT') != -1)[lf]    work.changeState(WorkItemConst.WORK_STATE_COMPLETE, 0, 52, "exception: " + e);[lf]   else[lf]     work.changeState(WorkItemConst.WORK_STATE_COMPLETE, 0, 60, "exception: " + e);[lf]    logger.debug("DEBUG:Last Line reached----");[lf]      // java.lang.System.out.println("Last Line reached----");[lf]  }[lf]}</statement><name/><validation_status>0</validation_status><validation_status_msg/></script_line><script_line><script_line_id>159:TEST</script_line_id><script_id>40:TEST</script_id><sequence>2</sequence><script_class_id>7</script_class_id><source_name>LOCAL</source_name><row_version>1</row_version><lu_id>SNEHAI</lu_id><lu_date>2015-10-27T00:56:09</lu_date><statement>importPackage(Packages.com.workpoint.common.script);[lf]importPackage(Packages.com.workpoint.client);[lf]importPackage(Packages.com.workpoint.common.data);[lf]importPackage(Packages.com.workpoint.common.util);[lf][lf]java.lang.System.out.println("In 2nd Script after import----");[lf]SymActID = SymbolTable.getSymbol("ActInstID").getPrimaryValue();[lf]SymActDB = SymbolTable.getSymbol("ActInstDB").getPrimaryValue();[lf]SymIteration = SymbolTable.getSymbol("WorkItemIteration").getPrimaryValue();[lf]activity = new TableID(SymActID + ":" + SymActDB);[lf][lf]work = WorkItemEntry.queryByID(ClientContext, activity, SymIteration);[lf][lf]if( work != null )[lf]{[lf]    workstate = work.getWorkStateID();[lf]    if( workstate == WorkItemConst.WORK_STATE_AVAILABLE ) // Available[lf]            work.openAndComplete(0);[lf]    else if( workstate == WorkItemConst.WORK_STATE_OPEN ) // Open[lf]        work.complete(0);[lf]}</statement><name/><validation_status>0</validation_status><validation_status_msg/></script_line><validation_status>0</validation_status></script>